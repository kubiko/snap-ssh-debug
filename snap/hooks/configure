#!/bin/bash

source $SNAP/meta/hooks/install


if [[ -n "${SSH_KEY_USER}" ]] || [[ -n "${SSH_KEY_MACHINE_ALIAS}" ]]; then
  # do we already have corect key generated?
  if [ -z "$(grep '${SSH_KEY_USER}@${SSH_MACHINE_ALIAS}' ${SSH_KEY}.pub)" ]; then
    # update key alias
    sed -i 's/'"${DEFAULT_SSH_KEY_USER}"'@'"${DEFAULT_SSH_KEY_MACHINE_ALIAS}"'/'"${SSH_KEY_USER}"'@'"${SSH_KEY_MACHINE_ALIAS}"'/g' ${SSH_KEY}.pub
  fi
fi

# in case config has overiden pub ssh key, write it back
if [ "$(snapctl get ssh-tunnel.local.ssh-pub-key)" != "$(cat ${SSH_KEY}.pub)" ]; then
    snapctl set ssh-tunnel.local.ssh-pub-key="$(cat ${SSH_KEY}.pub)"
fi

# if we have enough config settings, start service
if [[ -z "$(snapctl get ssh-tunnel.remote.target)" ]] || [[ -z "$(snapctl get ssh-tunnel.remote.forwarding-port)" ]] || [[ -z "$(snapctl get ssh-tunnel.remote.user)" ]] ; then
    # service is not configured, disable it quit
    echo "ssh tunnel is not configured, disabling service"
    snapctl stop --disable ${SNAP_INSTANCE_NAME}.ssh-tunnel || true
else
    echo "ssh tunnel has enough configuration, try to start the service"
    snapctl start --enable ${SNAP_INSTANCE_NAME}.ssh-tunnel || true
    snapctl restart ${SNAP_INSTANCE_NAME}.ssh-tunnel
fi

if [ "true" == "$(snapctl get ssh-server.enabled)" ]; then
    snapctl start --enable ${SNAP_INSTANCE_NAME}.dropbear
    snapctl restart ${SNAP_INSTANCE_NAME}.dropbear
fi

mkdir -p ${SSH_DIR}
chmod 0700 ${SSH_DIR}

# update authorised keys if defined
if [ -n "$(snapctl get ssh-server.authorized-keys)" ]; then
    snapctl get ssh-server.authorized-keys > ${SSH_DIR}/authorized_keys
    chmod 0600 ${SSH_DIR}/authorized_keys
fi
