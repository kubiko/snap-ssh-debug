name: ondra-snap-ssh-debug
base: core22
version: '0.5'
summary: ssh tunnel with built in ssh server

architectures:
    - build-on: armhf
    - build-on: arm64
    - build-on: amd64

description: |
  ssh tunnel with built in ssh server.
  It can be run stand alone as ssh-tunnel and bind on local ssh server. Or it can be used as boilerplate to be added into own snap to enable remote
  application debugging without reliance on system ssh server. At which point ssh session runs confined in host snap context.

  At install ssh key is generated and stored to configurations:
  `$ snap get ondra-snap-ssh-debug ssh-tunnel.local.ssh-pub-key`
  add this to your remove server to allow auto connection.

  By default ssh tunnel and ssh server are disabled:
  To configure ssh tunnel, use following configuration (with own values):
  `$ snap set ondra-snap-ssh-debug ssh-tunnel='{ "remote": {"target": "162.162.11.1", "forwarding-port": "2020", "remote.ssh-port": "22", "user": "ubuntu" }, "local": { "address": "localhost"}}' `

  To use built in ssh server, use following example:
  `$ snap set ondra-snap-ssh-debug ssh-tunnel.local.port=2040`
  `$ snap set ondra-snap-ssh-debug ssh-server='{ "enabled": "true", "authorized-keys" : "ssh-rsa AAAA<MY SSH public key>== ondrej.kubik"}' `

grade: stable
confinement: strict

environment:
    PATH:             "$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"
    LD_LIBRARY_PATH:  "$SNAP/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}:$SNAP_LIBRARY_PATH:$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}"
    DEFAULT_SSH_KEY_MACHINE_ALIAS: my-ubuntu-core
    SNAP_SFTP_SERVER: $SNAP/usr/lib/openssh/sftp-server

apps:
  ssh-tunnel:
    command: bin/ssh-tunnel
    daemon: simple
    restart-condition: always
    restart-delay: 20s
    plugs:
      - network
      - network-bind
      - ssh-keys

  dropbear:
    command: bin/ssh-server
    daemon: simple
    restart-delay: 5s
    plugs:
      - hardware-observe
      - home
      - log-observe
      - network
      - network-bind
      - network-observe
      - system-observe
      - ssh-keys

parts:
  glue:
    plugin: nil
    override-pull: |
      cat > ssh-server  <<EOF
      #!/bin/sh

      # run server only when enabled in config
      if [ "true" = "\$(snapctl get ssh-server.enabled)" ]; then
        PORT=\$(snapctl get  ssh-tunnel.local.port)
        [ -z "\${PORT}" ] && PORT="22"
        \${SNAP}/usr/sbin/dropbear -e -F -R -g -a \\
          -p \${PORT} \\
          -P \${SNAP_COMMON}/dbearPID \\
          -r \${SNAP_COMMON}/etc/dropbear/dropbear_ed25519_host_key \
          -r \${SNAP_COMMON}/etc/dropbear/dropbear_rsa_host_key \
          -r \${SNAP_COMMON}/etc/dropbear/dropbear_dss_host_key \
          -r \${SNAP_COMMON}/etc/dropbear/dropbear_ecdsa_host_key
      fi
      EOF
      cat > ssh-tunnel <<EOF
      #!/bin/bash

      SSH_DIR="\${SNAP_COMMON}/.ssh"
      SSH_KEY="\${SSH_DIR}/ssh-tunnel-key"

      # first get settings (if there are any)
      REMOTE_TARGET=\$(snapctl get ssh-tunnel.remote.target)
      REMOTE_FORWARDING_PORT=\$(snapctl get ssh-tunnel.remote.forwarding-port)
      REMOTE_SSH_PORT=\$(snapctl get ssh-tunnel.remote.ssh-port)  # default 22
      REMOTE_USER=\$(snapctl get ssh-tunnel.remote.user)

      if [[ -z "\${REMOTE_TARGET}" ]] || [[ -z "\${REMOTE_FORWARDING_PORT}" ]] || [[ -z "\${REMOTE_USER}" ]] ; then
        # service is not configured, disable it quit
        echo "ssh tunnel is not configured, disabling service"
        snapctl stop --disable \${SNAP_INSTANCE_NAME}.ssh-tunnel || true
        exit 0
      fi

      [ -z "\${REMOTE_SSH_PORT}" ] && REMOTE_SSH_PORT="22"

      LOCAL_ADDR=\$(snapctl get ssh-tunnel.local.address) # default localhost
      LOCAL_PORT=\$(snapctl get ssh-tunnel.local.port) # default 22

      [ -z "\${LOCAL_PORT}" ] && LOCAL_PORT="22"
      [ -z "\${LOCAL_ADDR}" ] && LOCAL_ADDR="localhost"

      ssh -NT \\
        -o ServerAliveInterval=60 \\
        -o ExitOnForwardFailure=yes \\
        -o StrictHostKeyChecking=no \\
        -o UserKnownHostsFile=\${SSH_DIR}/known_hosts \\
        -i \${SSH_KEY} \\
        -R \${REMOTE_FORWARDING_PORT}:\${LOCAL_ADDR}:\${LOCAL_PORT} \\
        -p \${REMOTE_SSH_PORT} \\
        \${REMOTE_USER}@\${REMOTE_TARGET}
      EOF
    override-build: |
      install -m755 -D -t ${CRAFT_PART_INSTALL}/bin ssh-server
      install -m755 -D -t ${CRAFT_PART_INSTALL}/bin ssh-tunnel

  openssh-client:
    plugin: nil
    stage-packages:
        - openssh-client
        - openssh-sftp-server

  dropbear:
    plugin: autotools
    source: https://github.com/mkj/dropbear.git
    source-branch: DROPBEAR_2022.82
    override-pull: |
      craftctl default
      git apply ${CRAFT_PROJECT_DIR}/dropbear-000*-*.patch
    autotools-configure-parameters:
      - --disable-lastlog
      - --disable-shadow
      - --prefix=/usr
      - --bindir=/usr/bin
      - --disable-syslog

build-packages:
  - zlib1g-dev
